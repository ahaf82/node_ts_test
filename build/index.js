(()=>{var e={251:e=>{e.exports={jwtSecret:"tsrcipt"}},142:e=>{"use strict";e.exports=require("dotenv")}},o={};function t(n){var s=o[n];if(void 0!==s)return s.exports;var r=o[n]={exports:{}};return e[n](r,r.exports,t),r.exports}(()=>{"use strict";const e=require("express"),o=require("cors"),n=require("body-parser"),s=require("mongoose"),r=require("bcrypt"),i=new s.Schema({email:{type:String,unique:!0,required:!0,lowercase:!0,trim:!0},password:{type:String,required:!0}});i.pre("save",(async function(e){const o=this;if(!o.isModified("password"))return e();const t=await r.genSalt(10),n=await r.hash(o.password,t);o.password=n,e()})),i.methods.comparePassword=async function(e){return await r.compare(e,this.password)};const a=(0,s.model)("User",i),d=require("jsonwebtoken");var c=t(251);function u(e){return d.sign({id:e.id,email:e.email},c.jwtSecret,{expiresIn:86400})}const l=e.Router();l.post("/api/register",(async(e,o)=>{if(!e.body.email||!e.body.password)return o.status(400).json({msg:"Bitte alle Felder ausfüllen."});if(await a.findOne({email:e.body.email}))return o.status(400).json({msg:"Der Nutzer existiert bereits."});const t=new a(e.body);return await t.save(),o.status(201).json(t)})),l.post("/api/login",(async(e,o)=>{if(console.log(e.body),!e.body.email||!e.body.password)return o.status(400).json({msg:"Bitte alle Felder ausfüllen"});const t=await a.findOne({email:e.body.email});return t?await t.comparePassword(e.body.password)?o.status(200).json({token:u(t)}):o.status(400).json({msg:"Die eingegebenen Daten konnten keinem Nutzer zugeordnet werden"}):o.status(400).json({msg:"Nutzer existiert nicht."})}));const p=new s.Schema({description:String}),g=s.model("Todo",p),m=(e,o,t)=>{const n=e.header("x-auth-token");if(!n)return o.status(401).json({msg:"No token, authorization denied"});try{const e=d.verify(n,c.jwtSecret);console.log("decoded in auth",e),t()}catch(e){o.status(401).json({mdg:"Token not valid"})}},w=e.Router();w.get("/api/todo",m,(async(e,o,t)=>{try{let e=await g.find({});e=e.map((e=>({id:e._id,description:e.description}))),o.json(e)}catch(e){o.status(500),o.end(),console.error("Caught error",e)}})),w.post("/api/todo",m,(async(e,o,t)=>{const n=e.body.description,s=new g({description:n});console.log("create Todo",n),await s.save(),o.send({msg:n}),o.end()})),w.put("/api/todo/:id",m,(async(e,o,t)=>{const n=e.body.description,s=e.params.id;await g.findByIdAndUpdate(s,{description:n}),console.log("update Todo",n),o.send({msg:n}),o.end()})),w.delete("/api/todo/:id",m,(async(e,o,t)=>{const n=e.params.id;await g.findByIdAndRemove(n),console.log("delete Todo",n),o.end()}));const y=e.Router();y.post("/api/test",m,(async(e,o,t)=>{console.log("request in server"),o.send({msg:"got request"}),o.end()}));const f=e();f.use(o()),f.use(n.json()),f.use(((e,o,t)=>{console.info(`${e.method} ${e.originalUrl}`);const n=(new Date).getTime();o.on("finish",(()=>{const t=(new Date).getTime()-n,s=`${e.method} ${e.originalUrl} ${o.statusCode} ${t}ms`;console.info(s)})),t()})),f.use(l),f.use(w),f.use(y);const h=require("http");t(142).config();const b=h.createServer(f);b.listen(8080),b.on("error",(e=>{console.error(e)})),b.on("listening",(async()=>{console.info("Listening on port 8080"),s.connect(process.env.MONGO_URI,{}),s.connection.once("open",(()=>{console.info("Connected to Mongo via Mongoose")})),s.connection.on("error",(e=>{console.error("Unable to connect to Mongo via Mongoose",e)}))}))})()})();