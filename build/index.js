(()=>{var e={251:e=>{e.exports={jwtSecret:"tsrcipt"}},142:e=>{"use strict";e.exports=require("dotenv")}},o={};function s(t){var n=o[t];if(void 0!==n)return n.exports;var r=o[t]={exports:{}};return e[t](r,r.exports,s),r.exports}(()=>{"use strict";const e=require("express"),o=require("cors"),t=require("body-parser"),n=require("mongoose"),r=require("bcrypt"),i=new n.Schema({email:{type:String,unique:!0,required:!0,lowercase:!0,trim:!0},password:{type:String,required:!0}});i.pre("save",(async function(e){const o=this;if(!o.isModified("password"))return e();const s=await r.genSalt(10),t=await r.hash(o.password,s);o.password=t,e()})),i.methods.comparePassword=async function(e){return await r.compare(e,this.password)};const a=(0,n.model)("User",i),d=require("jsonwebtoken");var c=s(251);function u(e){return d.sign({id:e.id,email:e.email},c.jwtSecret,{expiresIn:86400})}const l=e.Router();l.post("/api/register",(async(e,o)=>{if(!e.body.email||!e.body.password)return o.status(400).json({msg:"Bitte alle Felder ausfüllen."});if(await a.findOne({email:e.body.email}))return o.status(400).json({msg:"Der Nutzer existiert bereits."});const s=new a(e.body);return await s.save(),o.status(201).json(s)})),l.post("/api/login",(async(e,o)=>{if(console.log(e.body),!e.body.email||!e.body.password)return o.status(400).json({msg:"Bitte alle Felder ausfüllen"});const s=await a.findOne({email:e.body.email});return s?await s.comparePassword(e.body.password)?o.status(200).json({token:u(s)}):o.status(400).json({msg:"Die eingegebenen Daten konnten keinem Nutzer zugeordnet werden"}):o.status(400).json({msg:"Nutzer existiert nicht."})}));const p=new n.Schema({description:String}),m=n.model("Todo",p),g=(e,o,s)=>{const t=e.header("x-auth-token");if(!t)return o.status(401).json({msg:"No token, authorization denied"});try{d.verify(t,c.jwtSecret),s()}catch(e){o.status(401).json({mdg:"Token not valid"})}},w=e.Router();w.get("/api/todo",g,(async(e,o,s)=>{try{let e=await m.find({});e=e.map((e=>({id:e._id,description:e.description}))),o.json(e)}catch(e){o.status(500),o.end(),console.error("Caught error",e)}})),w.post("/api/todo",g,(async(e,o,s)=>{const t=e.body.description,n=new m({description:t});console.log("create Todo",t),await n.save(),o.send({msg:t}),o.end()})),w.put("/api/todo/:id",g,(async(e,o,s)=>{const t=e.body.description,n=e.params.id;await m.findByIdAndUpdate(n,{description:t}),console.log("update Todo",t),o.send({msg:t}),o.end()})),w.delete("/api/todo/:id",g,(async(e,o,s)=>{const t=e.params.id;await m.findByIdAndRemove(t),console.log("delete Todo",t),o.end()}));const y=require("events"),f=require("worker_threads"),v=new y.EventEmitter,h=new y.EventEmitter;h.on("new User",((e,o)=>{console.log(`I am ${e} and send a ${o}-mail`)}));const b=e.Router();b.post("/api/test",g,(async(e,o,s)=>{h.emit("new User","Armin","B2B"),v.emit("create User"),(async e=>{new Promise(((o,s)=>{const t=new f.Worker("./src/worker/workers.js");t.on("error",(o=>{console.log(o),s(e.send(o))})),t.on("I'm ready Sucker",(()=>{console.log("working process ready"),o(e.send({msg:"got request sucker"}).end())})),t.on("message",(s=>{o(e.send({msg:"got request",result:s}).end())})),t.postMessage("Hey Dude!")}))})(o)})),b.put("/api/test/",g,(async(e,o,s)=>{h.emit("add Listener"),v.emit("update User"),o.end()})),b.delete("/api/test/",g,(async(e,o,s)=>{h.emit("remove Listener"),v.emit("delete User"),o.end()}));const j=e();j.use(o()),j.use(t.json()),j.use(((e,o,s)=>{console.info(`${e.method} ${e.originalUrl}`);const t=(new Date).getTime();o.on("finish",(()=>{const s=(new Date).getTime()-t,n=`${e.method} ${e.originalUrl} ${o.statusCode} ${s}ms`;console.info(n)})),s()})),j.use(l),j.use(w),j.use(b);const q=require("http"),k=()=>{console.log("creating a user")},U=e=>{console.log("deleting user")},x=()=>{console.log("updating a user")};var S;s(142).config(),(S=v).on("create User",k),S.on("update User",x),S.on("delete User",U);const $=q.createServer(j);$.listen(8080),$.on("error",(e=>{console.error(e)})),$.on("listening",(async()=>{console.info("Listening on port 8080"),n.connect(process.env.MONGO_URI,{}),n.connection.once("open",(()=>{console.info("Connected to Mongo via Mongoose")})),n.connection.on("error",(e=>{console.error("Unable to connect to Mongo via Mongoose",e)}))}))})()})();