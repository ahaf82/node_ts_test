(()=>{"use strict";const o=require("express"),e=require("cors"),n=require("body-parser"),t=require("mongodb");class s{static client;constructor(){}static connect(o){return new Promise(((e,n)=>{t.MongoClient.connect(o,{},((o,t)=>{o?n(o):(s.client=t,e(t))}))}))}disconnect(){s.client.close()}}const r=o.Router(),i=()=>s.client.db("todo").collection("todos");r.get("/todo",((o,e,n)=>{i().find({}).toArray(((o,n)=>{o?(e.status(500),e.end(),console.error("Caught error",o)):(n=n.map((o=>({id:o._id,description:o.description}))),e.json(n))}))})),r.post("/todo",((o,e,n)=>{const t=o.body.description;i().insert({description:t}),e.end()})),r.put("/todo/:id",((o,e,n)=>{const s=o.params.id,r=o.body.description;i().findOneAndUpdate({_id:new t.ObjectId(s)},{$set:{description:r}}),e.end()})),r.delete("/todo/:id",((o,e,n)=>{const s=o.params.id;i().remove({_id:new t.ObjectId(s)}),e.end()}));const c=o();c.use(e()),c.use(n.json()),c.use(((o,e,n)=>{console.info(`${o.method} ${o.originalUrl}`);const t=(new Date).getTime();e.on("finish",(()=>{const n=(new Date).getTime()-t,s=`${o.method} ${o.originalUrl} ${e.statusCode} ${n}ms`;console.info(s)})),n()})),c.use(r);const d=require("http"),a=require("mongoose"),l=d.createServer(c);l.listen(8080),l.on("error",(o=>{console.error(o)})),l.on("listening",(async()=>{console.info("Listening on port 8080"),a.connect("mongodb+srv://Guest:GuestSession@cluster0.wucbb.mongodb.net/myFirstDatabase?retryWrites=true&w=majority",{}),a.connection.once("open",(()=>{console.info("Connected to Mongo via Mongoose")})),a.connection.on("error",(o=>{console.error("Unable to connect to Mongo via Mongoose",o)}))}))})();